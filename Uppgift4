//Maja Nyberg och Eric Buxton

// TASK 4

const WIDTH = 400;
const HEIGHT = 300;
const FPS = 15;

/**
 * Vertically flips an image.
 * @param {array} src - contains the source image
 * @param {array} dest - array where the flipped source image is copied into
 */
function flip_vertically(src, dest) {
    const width = image_width();
    const height = image_height();

    for (let i = 0; i < height; i = i + 1) {
        for (let j = 0; j < width; j = j + 1) {
            for (let k = 0; k < 4; k = k + 1) {
                dest[i][j][k] = src[height - 1 - i][j][k];
            }
        }
    }
}

/**
 * Inverts the colors of an image.
 * @param {array} src - contains the source image
 * @param {array} dest - array where the color-inverted source image is copied into
 */
function color_invert(src, dest) {
    const width = image_width();
    const height = image_height();

    for (let i = 0; i < height; i = i + 1){
        for (let j = 0; j < width; j = j + 1){
            for (let c = 0; c < 4; c = c + 1) {
                dest[i][j][c] = c < 3 ? 255 - src[i][j][c] : src[i][j][c];
            }
        }
    }
}


// Copy your solution for Task 3 (zoom) here.
/**
 * Zooms in to the middle by a provided factor
 * @param [number] factor - the factor of which the image will be zoomed by
 * @returns {function} Returns a function that applies to the image.
 */
function zoom(factor) {
    // your solution here
    return (src, dest) => {
        
        const height = image_height();
        const width = image_width();
        
        const scaled_height = height/factor;
        const scaled_width = width/factor;
     
        
        for (let i = 0; i < height; i = i + 1) {
            for (let j = 0; j < width; j = j + 1) {
                    
                dest[i][j][0] = src[math_floor((i+scaled_height)/factor)]
                    [math_floor((j+scaled_width)/factor)][0];
                dest[i][j][1] = src[math_floor((i+scaled_height)/factor)]
                    [math_floor((j+scaled_width)/factor)][1];
                dest[i][j][2] = src[math_floor((i+scaled_height)/factor)]
                    [math_floor((j+scaled_width)/factor)][2];
                dest[i][j][3] = src[math_floor((i+scaled_height)/factor)]
                    [math_floor((j+scaled_width)/factor)][3];
            }
        }
    };
}
/**
 * Creates an image with given dimensions with each pixel having maximal intensity
 * of red, green and blue.
 * @param {number} width - width of the image to be generated
 * @param {number} height - height of the image to be generated
 * @returns {array} Returns a 3 dimensional array representing the image
 */
function make_image(width, height) {
    const img = [];
    for (let i = 0; i < height; i = i + 1) {
        const row = [];
        img[i] = row;
        for (let j = 0; j < width; j = j + 1) {
            const pixel = [];
            row[j] = pixel;
            for (let z = 0; z < 4; z = z + 1) {
                pixel[z] = 255;
            }
        }
    }
    return img;
}

/**
 * Stacks the images produced by two filters one on top of another.
 * @param {function} filter1 - filter to apply on the top
 * @param {function} filter2 - filter to apply on the bottom
 * @returns {function} Returns a function that applies the filters.
 */
function stack(filter1, filter2) {
    const temp1 = make_image(WIDTH, HEIGHT);
    const temp2 = make_image(WIDTH, HEIGHT);

    return (src, dest) => {
        const width = image_width();
        const height = image_height();
        const half_height = math_floor(height / 2);

        filter1(src, temp1);
        filter2(src, temp2);

        for (let i = 0; i < half_height; i = i + 1) {
            dest[i] = temp1[i * 2];
            dest[i + half_height] = temp2[i * 2];
        }

        // take last row from temp2, if height is odd
        for (let i = half_height * 2; i < height; i = i + 1) {
            dest[i] = temp2[i];
        }
    };
}

/**
 * Places the images produces by two filters beside each other.
 * @param [function] filter1 - filter to apply to the left
 * @param {function} filter2 - filter to apply to the right
 * @returns [function] Returns a function that applies to the filters.
 */
function beside(filter1, filter2) {
    // your program goes here
    const temp1 = make_image(WIDTH, HEIGHT);
    const temp2 = make_image(WIDTH, HEIGHT);

    return (src, dest) => {
        
        const width = image_width();
        const height = image_height();
        const half_width = math_floor(width / 2);

        filter1(src, temp1);
        filter2(src, temp2);
        
        for (let i = 0; i < height; i = i + 1) {
            
            for (let j = 0; j < half_width; j = j + 1) {
                
                dest[i][j] = temp1[i][j * 2];
                dest[i][j + half_width] = temp2[i][j * 2];
            }

        // take last row from temp2, if width is odd
            for (let j = half_width * 2; j < width; j = j + 1) {
                
                dest[i][j] = temp2[i][j];
            }
        }
    };
}



install_filter(stack(beside(flip_vertically, color_invert),
                     beside(copy_image, zoom(2)))); 

set_dimensions(WIDTH, HEIGHT);
keep_aspect_ratio(true);
set_fps(FPS);
start();
