//Maja Nyberg och Eric Buxton

// TASK 2

const WIDTH = 400;
const HEIGHT = 300;
const FPS = 15;

/**
 * Copies the contents from one array to another.
 * @param {array} src - contains information to be copied
 * @param {array} dest - array where information is copied into
 */
function copy(src, dest) {
    const width = image_width();
    const height = image_height();

    for (let i = 0; i < height; i = i + 1) {
        for (let j = 0; j < width; j = j + 1) {
           dest[i][j][0] = src[i][j][0];
           dest[i][j][1] = src[i][j][1];
           dest[i][j][2] = src[i][j][2];
           dest[i][j][3] = src[i][j][3];
        }
    }
}

/**
 * Overlays a crosshair on an image
 * @param {array} src - contains the source image
 * @param {array} dest - contains the destination image
 */
function crosshair(src, dest) {
    // your program goes here
    const width = image_width();
    const height = image_height();
    for (let y = 0; y < height; y = y + 1) {
        for (let x = 0; x < width; x = x + 1) {
            
            dest[y][x][0] = (x === width/2)
            ? 255
            : (y === height/2)
            ? 255
            : src[y][x][0]; //color: red
            
            dest[y][x][1] = src[y][x][1];// color: green
            dest[y][x][2] = src[y][x][2];// color: blue
            dest[y][x][3] = src[y][x][3];
            
            let radius = math_sqrt(math_pow((y-(height/2)), 2) +
            math_pow((x -(width/2)), 2));
            
            for (let j = 25; j < width; j = j + 50){
                
                if(radius> j && radius< j+25){
                    dest[y][x][2]= 255;
                    break;
                }
            }
        }
    }
}


install_filter(copy);
install_filter(crosshair);  // use this filter when crosshair function is ready.
set_dimensions(WIDTH, HEIGHT);
keep_aspect_ratio(true);
set_fps(FPS);
start();
